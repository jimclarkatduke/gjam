osens <- order( colMeans(sensMu), decreasing=T )
sensMu <- sensMu[,osens,drop = FALSE]
sensSe <- sensSe[,osens,drop = FALSE]
scol   <- scol[ osens ]
nc <- ncol(sensMu)
sensMu <- sensMu[drop = FALSE, notOther,]
sensSe <- sensSe[drop = FALSE, notOther,]
sensBeta
sensMu <- sensSe <- numeric(0)
acol   <- colF(3)
names(acol) <- c('movement','DI growth','DD growth')
scol   <- character(0)
if( 'sensBeta' %in% names(parameters) ){
if( var( sensBeta[,1]) != 0 ){
sensMu <- cbind(sensMu, sensBeta[,1])
sensSe <- cbind(sensSe, sensBeta[,1])
colnames(sensMu)[ncol(sensMu)] <- colnames(sensSe)[ncol(sensMu)] <- 'beta'
scol <- c(scol, acol[1])
}
}
if( 'sensRho' %in% names(parameters) ){
sensMu <- cbind(sensMu, sensRho[,1])
sensSe <- cbind(sensSe, sensRho[,1])
colnames(sensMu)[ncol(sensMu)] <- colnames(sensSe)[ncol(sensMu)] <- 'rho'
scol <- c(scol, acol[2])
}
if( 'sensAlpha' %in% names(parameters) ){
sensMu <- cbind(sensMu, sensAlpha[,1])
sensSe <- cbind(sensSe, sensAlpha[,1])
colnames(sensMu)[ncol(sensMu)] <- colnames(sensSe)[ncol(sensMu)] <- 'alpha'
scol <- c(scol, acol[3])
}
sensMu
osens <- order( colMeans(sensMu), decreasing=T )
sensMu <- sensMu[,osens,drop = FALSE]
sensSe <- sensSe[,osens,drop = FALSE]
scol   <- scol[ osens ]
nc <- ncol(sensMu)
sensMu <- sensMu[drop = FALSE, notOther,]
sensSe <- sensSe[drop = FALSE, notOther,]
# total variance
ord <- order(sensMu[,1], decreasing = T)
graphics.off()
mfrow <- c(1,1)
if(nc > 1)mfrow <- c(2,1)
par( mfrow = mfrow, bty = 'n', mar = c(3,4,1,2) )
if(nc > 1){
#proportion of total
sigma <- sqrt( diag( sigMu )[notOther] ) #sensAlpha, sensRho, sensBeta on sd scale
sens  <- cbind(sensMu, sigma)
sprop <- sweep( sens, 1, rowSums(sens), '/')
ord <- order(sprop[,1], decreasing = T)
smu <- t(sprop[ord,])
smu <- smu[drop=F, 1:(nrow(smu)-1),]
smax <- max( colSums(smu) )
tmp <- barplot( smu, beside = F, col = .getColor(scol, .4), border = scol, xaxt = 'n',
ylim = c(0, smax), ylab = 'Proportion of total SD' )
text( tmp - .2*diff(tmp)[1], .04, colnames(smu), srt = 90, pos = 4, cex=.9)
}
smu <- t(sensMu[drop=F, ord,])
sse <- t(sensSe[drop=F, ord,])
tmp <- barplot( smu, beside = T, col = .getColor(scol, .4), border = scol, xaxt = 'n',
ylim = 1*c(0, max(smu + sse)), ylab = 'Std deviation scale' )
for(j in 1:nc){
errorBars( tmp[j,], smu[j,], smu[j,] + sse[j,], col = scol[j], code=3, length=.04)
}
if(nc == 1)text( tmp[1,], 1.05*apply(smu + sse, 2, max), colnames(smu), srt = 75, pos = 4,
cex = .9)
legend('topright', legend = names(scol), text.col = scol, bty='n')
!GRIDPLOTS
plotPars
GRIDPLOTS <- T
mag <- mar
mag[4] <- max(mar[4],6)
par(mfrow=c(1,2), cex=.7, oma=oma, mar=mag, tcl= tcl, mgp=mgp)
LABELS <- T
if(S > 100 | !SPECLABS)LABELS <- F
dcor <- .cov2Cor(covy)
dcor[is.na(dcor)] <- 0
opt <- list( main='',cex=.2,ncluster=ncluster,
colCode=specColor[notOmit], textSize=.4,
LABELS = LABELS, DIST=F )
tmp <- .clusterPlot( dcor, opt)
colCode <- tmp$colCode
clusterIndex <- tmp$clusterIndex
clusterOrder <- tmp$corder
.plotLabel('a) Data correlation',above=T, cex=1.7)
if( !is.null(ematrix) ){
emm   <- ematrix
emm   <- .cov2Cor(emm)
tmp   <- .clustMat(emm, SYM = T)#########
ecor <- tmp$cmat
opt <- list( main='',cex=.2, ncluster=ncluster,
colCode=specColor[notOmit], textSize=.5,
LABELS = LABELS, DIST=F)
tmp <- .clusterPlot( ecor , opt ) #######################
.plotLabel('b) E correlation',above=T, cex=1.7)
clusterIndex <- cbind( clusterIndex, tmp$clusterIndex )
clusterOrder <- cbind( clusterOrder, tmp$corder )
rownames(clusterIndex) <- rownames(clusterOrder) <- snames[notOmit]
colnames(clusterIndex) <- colnames(clusterOrder) <- c('data','E')
}
ematrix
if( !is.null(ematrix) ){
imat <- output$inputs$y
imat[imat > 0] <- 1
iord <- colSums(imat)
etab  <- table(clusterIndex[,'E'])
eComs <- matrix(NA,ncluster, max(etab))
ename <- rep( character(0), max(etab) )
egroup <- clusterIndex[,'E']
for(j in 1:ncluster){
wj <- which(clusterIndex[,'E'] == j)
jname <- rownames(clusterIndex)[wj]
jname <- jname[order(iord[jname],decreasing=T)]
eComs[j,1:length(jname)] <- jname
mm    <- min( c(3,length(jname)) )
jj    <- substr(jname[1:mm],1,6)
ename[j] <- paste0(jj,collapse='_')
}
rownames(eComs) <- ename
eComs <- t(eComs)
########### ordination
if( !is.null(eVecs) ){
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'ordination.pdf') ) # start plot
clusNames <- eComs[1,]
lambda <- eValues/sum(eValues)
cl     <- cumsum(lambda)
cbord <- .getColor(specColor[notOther],.4)
cfill <- .getColor(specColor[notOther],.4)
par(mfcol=c(2,2), bty='n', cex = cex, mar=c(4,4,1,1))
p1 <- paste('Axis I (',round(100*lambda[1],0),'%)',sep='')
p2 <- paste('Axis II (',round(100*lambda[2],0),'%)',sep='')
p3 <- paste('Axis III (',round(100*lambda[3],0),'%)',sep='')
xlim <- range(eVecs[,1])
plot(eVecs[,1],eVecs[,2],cex=1,col=cbord, bg = cfill, pch=16,
xlab=p1, ylab = p2)
abline(h=0,col=.getColor('black',.1),lwd=2,lty=2)
abline(v=0,col=.getColor('black',.1),lwd=2,lty=2)
text(eVecs[clusNames,1],eVecs[clusNames,2],substr(clusNames,1,7))
plot(eVecs[,1],eVecs[,3],cex=1,col=cbord, bg = cfill, pch=16,
xlab=p1, ylab = p3)
abline(h=0,col=.getColor('black',.1),lwd=2,lty=2)
abline(v=0,col=.getColor('black',.1),lwd=2,lty=2)
text(eVecs[clusNames,1],eVecs[clusNames,3],substr(clusNames,1,7))
plot(eVecs[,2],eVecs[,3],cex=1,col=cbord, bg = cfill, pch=16,
xlab=p2, ylab = p3)
abline(h=0,col=.getColor('black',.1),lwd=2,lty=2)
abline(v=0,col=.getColor('black',.1),lwd=2,lty=2)
text(eVecs[clusNames,2],eVecs[clusNames,3],substr(clusNames,1,7))
plot(cl,type='s',xlab='Rank',ylab='Proportion of variance',xlim=c(.9,S),
ylim=c(0,1),log='x')
lines(c(.9,1),c(0,cl[1]),lwd=2,type='s')
for(j in 1:length(lambda))lines(c(j,j),c(0,cl[j]),col='grey')
lines(cl,lwd=2,type='s')
abline(h=1,lwd=2,col=.getColor('grey',.5),lty=2)
if(!SAVEPLOTS){
readline('ordination of E matrix -- return to continue ')
} else {
dev.off()
}
}
}
par(mfrow=c(1,1),bty='n',cex=1, oma=oma, mar=mag, tcl= tcl, mgp=mgp)
colnames(corMu) <- rownames(corMu) <- colnames(y)
psize <- .62
if(SMALLPLOTS)psize <- psize/2
par(plt=c(.03,.15,.1,.9), bty='n', new=F)
opt <- list( main=' ',cex=.2, ncluster=ncluster,
colCode=specColor[notOmit], textSize=.5,
LABELS = F, DIST=F )
tmp <- .clusterPlot( corMu[notOmit,notOmit] , opt)
colCode   <- tmp$colCode
corder    <- rev(tmp$corder)
# specOrder <- snames[notOmit[corder]]
rOrder <- snames[notOmit[corder]]
clusterIndex <- cbind( clusterIndex, tmp$clusterIndex )
clusterOrder <- cbind( clusterOrder, tmp$corder )
ncc <- ncol(clusterIndex)
colnames(clusterIndex)[ncc] <- colnames(clusterOrder)[ncc] <- 'R'
if(LABELS){
par(plt=c(.15,.33,.1,.9), bty='n', new=T)
plot(c(0,0),c(0,0),col='white',xlim=range(c(0,1)),ylim=c(0,SO),
xaxt='n',yaxt='n',xlab='',ylab='')
xl <- rep(.5,SO)
yl <- c(1:SO) + par('usr')[3] - .75
cex <- .fitText2Fig(rOrder,fraction=1.2)
text( xl,yl,rev(rOrder),pos=3,cex=cex, col=rev(colCode[corder]))
}
tmp <- .invMatZero(sgibbs,nsim=nrow(sgibbs),snames=snames,
knames=rOrder,index=NULL, COMPRESS=T,
REDUCT=REDUCT,
sigErrGibbs = output$chains$sigErrGibbs,
kgibbs = output$chains$kgibbs,
otherpar = otherpar, alpha=ematAlpha)
marIn <- tmp$inMarMat
conIn <- tmp$inConMat
wm    <- which(marIn[,1] %in% omit |  marIn[,2] %in% omit)
if(length(wm) > 0)marIn <- marIn[-wm,]
wm    <- which(conIn[,1] %in% omit |  conIn[,2] %in% omit)
if(length(wm) > 0)conIn <- conIn[-wm,]
sigCor <- c(nrow(marIn),nrow(conIn))/SM/(SM - 1)
sigCor <- round(100*sigCor,0)
names(sigCor) <- c('n_marIn','n_conIn')
mor <- notOmit[corder]
crr <- corMu[mor,mor]
marIn[,1] <- match(marIn[,1],mor)
marIn[,2] <- match(marIn[,2],mor)
conIn[,1] <- match(conIn[,1],mor)
conIn[,2] <- match(conIn[,2],mor)
makeCR <- list('white' = conIn,'grey' = marIn)
if(!is.null(specColor))textCol = colCode[mor]
par(plt=c(.33, .33 + psize,.1,.9), bty='n', new=T)
slim <- quantile(crr[lower.tri(crr)],c(.05,.95))
SPECLABS <- F
if(S < 30)SPECLABS <- T
.corPlot(crr, slim=slim, makeColor=makeCR,plotScale=.99,
PDIAG=T,CORLINES=CORLINES, textCol = colCode[corder],
SPECLABS = SPECLABS, squarePlot = F,
textSize=1, widex = width, widey = height, new=T, add=F)
ll <- paste(c('Cond Ind (white) = ', 'Cond & Marg Ind (grey) = '),
sigCor,c('%','%'),sep='')
legend('topright',ll,bty='n',cex=.8)
.plotLabel(expression( paste(hat(bold(R)),'structure'  )),above=T, cex=.9)
if(!SAVEPLOTS){
readline('posterior correlation for model -- return to continue ')
} else {
dev.off()
}
if( 'factorBeta' %in% names(inputs) & !FACNAMES){
fcnames <- names( inputs$factorBeta$factorList )
for(m in 1:length(fcnames)){
colnames(fBetaMu) <- .replaceString( colnames( fBetaMu ), fcnames[m], '' )
}
}
if(Q > 4 & !is.null(fMat)){
main1 <- expression( paste('Sensitivity ',hat(F)))
main2 <- expression( paste('Responses ',hat(B)))
ws <- which( rowSums(fMat) == 0)
if(length(ws) > 0){
not0 <- c(1:nrow(fMat))[-ws]
fMat <- fMat[drop=F,not0,not0]
rn   <- intersect( rownames(fMat), rownames(fBetaMu) )
fMat <- fMat[drop=F,rn,rn]
fBetaMu <- fBetaMu[rn,]
}
mat1 <- fMat
mat2 <- fBetaMu
expand <- ncol(mat1)/ncol(mat2)
expand <- max(c(1.,expand))
expand <- min( c(1.5, expand) )
if(nrow(fMat) > 3){
graphics.off()
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'gridF_B.pdf') ) # start plot
opt <- list(mainLeft=main1, main1=main1, main2 = main2,
topClus1=T, topClus2=T, rightLab=F, topLab1=T,
topLab2 = T, leftLab=T, ncluster = ncluster,
colCode2 = specColor[notOther], lower1 = T, diag1 = T,
lower2 = F)
tr <- try(
.clusterWithGrid(mat1, mat2, expand=expand, opt), TRUE
)
if( inherits(tr,'try-error') ){
.clusterWithGrid(mat1, mat2, expand=1, opt)
}
if(!SAVEPLOTS){
readline('F & beta structure -- return to continue ')
} else {
dev.off()
}
}
}
graphics.off()
if(!is.null(ematrix)){
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'clusterGridE.pdf') ) # start plot
mat1 <- .cov2Cor( ematrix )
main1 <- expression(paste('Species ',hat(E)))
opt <- list(mainLeft=main1, leftClus=T, leftLab=T,
colCode1 = specColor[notOther], rowCode = specColor[notOther],
topLab1=T,ncluster = ncluster,
lower1 = T, diag1 = F,horiz1=clusterIndex[,'E'])
.clusterWithGrid(mat1, mat2=NULL, expand=1, opt)
if(!SAVEPLOTS){
readline('E: model-based response to X -- return to continue ')
} else {
dev.off()
}
################# resid and Egrid
graphics.off()
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'gridR_E.pdf') ) # start plot
dcor <- .cov2Cor(covy)
dcor[is.na(dcor)] <- 0
mat1 <- dcor
mat2 <- .cov2Cor( ematrix[rownames(dcor),rownames(dcor)] )
main1 <- expression(paste('Ordered by error ',hat(R)))
main2 <- expression(paste('Response ',hat(E)))
opt <- list(mainLeft='Species', main1=main1, main2 = main2,
leftClus=T, leftLab=T, rowCode = specColor[notOther],
topLab1 = T, topLab2 = T,rightLab=F,ncluster = ncluster,
lower1 = T, diag1 = F,lower2 = T, diag2 = T)
.clusterWithGrid(mat1, mat2, expand=1, opt)
if(!SAVEPLOTS){
readline('comparison R vs E -- return to continue ')
} else {
dev.off()
}
################# data vs E grid
graphics.off()
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'gridY_E.pdf') ) # start plot
ytmp <- jitter(y[,mor],1e-10)
cory <- cor(ytmp)
mat1 <- cory
mat2 <- ematrix[rownames(cory),rownames(cory)]
main1 <- 'Ordered by data, cor(Y)'
main2 <- expression(paste('Response ',hat(E)))
topLab1 <- topLab2 <- F
if(S < 30)topLab1 <- topLab2 <- T
opt <- list(mainLeft='Species', main1=main1, main2 = main2,
leftClus=T, leftLab=T, lower1 = T, diag1 = F, rowCode = specColor[notOther],
topLab1 = topLab1, topLab2 = topLab2,ncluster = ncluster,
lower2 = T, diag2 = T, sameOrder = T)
.clusterWithGrid(mat1, mat2=mat2, expand=1, opt )
if(!SAVEPLOTS){
readline('raw data vs E -- return to continue ')
} else {
dev.off()
}
}
if(is.null(output$parameters$betaStandXWmu)){
BETAGRID <- FALSE
}else{
if( nrow(output$parameters$betaStandXWmu) > 2 &
ncol(output$parameters$betaStandXWmu) > 1)BETAGRID <- TRUE
}
if( BETAGRID ){
graphics.off()
mat1 <- .cov2Cor( output$parameters$ematrix[notOther,notOther] )
mat2 <- t(output$parameters$betaStandXWmu)
if( 'factorBeta' %in% names(inputs) & !FACNAMES){
fcnames <- names( inputs$factorBeta$factorList )
for(m in 1:length(fcnames)){
colnames(mat2) <- .replaceString( colnames( mat2 ), fcnames[m], '' )
rownames(mat2) <- .replaceString( rownames( mat2 ), fcnames[m], '' )
}
}
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'clusterGridB.pdf') ) # start plot
main1 <- expression(paste('Species ',hat(E)))
main2 <- expression(paste(hat(B),' by predictor'))
topLab1 <- F
if(S < 30)topLab1 <- T
ee <- ncol(mat1)/ncol(mat2)
ee <- max(c(ee,.8))
ee <- min(c(ee, 1.2))
opt <- list(mainLeft=main1, main1=main1, main2 = main2,
topClus1=T, topClus2=T, topLab1 = topLab1, topLab2=T,
leftLab=T,lower1 = T, diag1 = F, ncluster = ncluster,
colCode1 = specColor[notOther], rowCode = specColor[notOther],
vert1=clusterIndex[,'E'], horiz2=clusterIndex[,'E'])
.clusterWithGrid(mat1, mat2, expand=ee, opt)
if(!SAVEPLOTS){
readline('beta ordered by response to X -- return to continue ')
} else {
dev.off()
}
################## random groups
if(RANDOM){
graphics.off()
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'randGroups.pdf') ) # start plot
G <- ncol(randByGroup)
mat1 <- randGroupVarMu[notOther,notOther]
mat1 <- .cov2Cor(mat1)
diag(mat1) <- 0
mat2 <- randByGroup[notOther,] # + matrix(betaMu[1,notOther],length(notOther),G, byrow=T)
main1 <- expression(paste('Species '))
main2 <- expression('Group')
topLab1 <- F
if(S < 30)topLab1 <- T
ee <- ncol(mat1)/ncol(mat2)
ee <- max(c(ee,1))
ee <- min(c(ee, 1.2))
opt <- list(mainLeft=main1, main1=main1, main2 = main2,leftClus=T,
topClus1=F, topClus2=T, topLab1 = topLab1, topLab2=T,
leftLab=T, lower1 = T, diag1 = F,
colCode1 = specColor[notOther])
.clusterWithGrid(mat1, mat2, expand=ee, opt)
if(!SAVEPLOTS){
readline('random groups correlation, coeffs -- return to continue ')
} else {
dev.off()
}
}
###################### Time grid
if(TIME){
graphics.off()
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'clusterTime.pdf') )
mat1 <- alphaMu[notOther,notOther]
lam  <- rhoStandXmu[,notOther]
mat2 <- t(lam)
colnames(mat2)[1] <- 'rho'
main1 <- expression(paste(hat(alpha),' from'))
side1 <- expression(paste(hat(alpha),' to'))
main2 <- expression(hat(rho))
mat1[is.na(mat1)] <- 0
mat2[is.na(mat2)] <- 0
topLab1 <- F
if(S < 30)topLab1 <- T
ee <- ncol(mat1)/(ncol(mat1) + ncol(mat2) )
slim1 <- range(mat1)
if(slim1[2] == 0)slim1[2] <- .0001
opt <- list(mainLeft=side1, main1=main1, main2 = main2,
ncluster = ncluster,
topClus1=F, topClus2=F, topLab1 = topLab1,
topLab2=T,
leftLab = T, rowCode = specColor[notOther],
rowOrder = c(1:S)[notOther], colOrder1 = c(1:S)[notOther],
colOrder2 = 1:ncol(mat2), slim1 = slim1,
colCode1 = specColor[notOther], lower1 = F, diag1 = F)
.clusterWithGrid(mat1, mat2, expand=ee, opt)
if(!SAVEPLOTS){
readline('alpha, rho -- return to continue ')
} else {
dev.off()
}
graphics.off()
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'clusterGridRho.pdf') ) # start plot
mat1 <- ematrix
main1 <- expression(paste('Species ',hat(E)))
main2 <- expression(paste(hat(Rho),' by predictor'))
topLab1 <- F
if(S < 40)topLab1 <- T
#   ee <- ncol(mat1)/(ncol(mat1) + ncol(mat2) )
ee <- max(ee,.05)
opt <- list(mainLeft=main1, main1=main1, main2 = main2,
colOrder2 = 1:ncol(mat2), ncluster = ncluster,
topClus1=T, topClus2=T, topLab1 = topLab1, topLab2=T,
colCode1 = specColor[notOther], lower1 = T, diag1 = F)
#                vert1=clusterIndex[,'E'], horiz2=clusterIndex[,'E'])
.clusterWithGrid(mat1, mat2, expand=ee, opt)
if(!SAVEPLOTS){
readline('Ematrix and rho -- return to continue ')
} else {
dev.off()
}
}
if(TRAITS){
betaTraitXMu <- output$parameters$betaTraitXWmu
if(nrow(betaTraitXMu) > 3){
bb <- betaTraitXMu[-1,]
ord <- order(colSums(abs(bb)),decreasing=T)
bb  <- bb[,ord]
bl  <- bb[,ord]
bh  <- bb[,ord]
ror <- order(rowSums(abs(bb)),decreasing=T)
bb  <- bb[ror,]
bl  <- bl[ror,]
bh  <- bh[ror,]
white <- which(bl < 0 & bh > 0,arr.ind=T)
makeColor <- list('white' = white )
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'gridTraitB.pdf') )
plotScale <- max(c(10,c(S,Q)/10))
par(mfrow=c(1,1), bty='n', oma=c(1,1,1,1),
mar=c(5,4,4,2), tcl= tcl, mgp=mgp)
ht <- nrow(bb)/ncol(bb)*width
opt <- list(mainLeft='', main1='', main2 = '',
topClus1=T, topClus2=T, topLab1 = T, topLab2=F,
leftClus=T,
leftLab=T, ncluster = ncluster,
colCode1 = traitColor)
.clusterWithGrid(mat1=betaTraitXMu[-1,], mat2=NULL, expand=1, opt)
if(!SAVEPLOTS){
readline('trait beta -- return to continue ')
} else {
dev.off()
}
}
}
}
all <- list(fit = fit, ematrix = ematrix,
eComs = eComs, ncluster = ncluster,
clusterIndex = clusterIndex, clusterOrder = clusterOrder,
eVecs = eVecs, eValues = eValues)
all <- all[ order(names(all)) ]
invisible(all)
graphics.off()
if(SAVEPLOTS)pdf( file=.outFile(outFolder,'clusterTime.pdf') )
mat1 <- alphaMu[notOther,notOther]
lam  <- rhoStandXmu[,notOther]
mat2 <- t(lam)
colnames(mat2)[1] <- 'rho'
main1 <- expression(paste(hat(alpha),' from'))
side1 <- expression(paste(hat(alpha),' to'))
main2 <- expression(hat(rho))
mat1[is.na(mat1)] <- 0
mat2[is.na(mat2)] <- 0
topLab1 <- F
if(S < 30)topLab1 <- T
ee <- ncol(mat1)/(ncol(mat1) + ncol(mat2) )
slim1 <- range(mat1)
if(slim1[2] == 0)slim1[2] <- .0001
dim(mat1)
S
dim(mat2)
opt <- list(mainLeft=side1, main1=main1, main2 = main2,
ncluster = ncluster,
topClus1=F, topClus2=F, topLab1 = topLab1,
topLab2=T,
leftLab = T, rowCode = specColor[notOther],
rowOrder = c(1:S)[notOther], colOrder1 = c(1:S)[notOther],
colOrder2 = 1:ncol(mat2), slim1 = slim1,
colCode1 = specColor[notOther], lower1 = F, diag1 = F)
.clusterWithGrid(mat1, mat2, expand=ee, opt)
source("~/Documents/GJAM/makeGJAMcurrent/RFunctions/gjamHfunctions.R")
